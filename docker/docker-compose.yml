version: "3.9"
services:
  orquestrador:
    build: ../orquestrador/
    volumes:
      - .:/usr/app
    ports:
      - 8001:8001
    environment: 
      - HOST_REDIS=redis
      - PORT_REDIS=6379
      - URL_RABBIT_MQ=amqp://guest:guest@rabbit-mq/
      - HOST_JAEGER=jaeger-all-in-one
      - PORT_JAEGER=6831
      - PROXY_CONTA=http://conta-service:8003/
      - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger-all-in-one:5778
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=jaeger-all-in-one
      - JAEGER_SAMPLER_TYPE=const
    depends_on: 
      - redis
      - rabbit-mq
      - jaeger-all-in-one
    networks:
      - trader-network
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.50'
          memory: 800M
        reservations:
          cpus: '0.25'
          memory: 800M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s 

  ordem-service:
    build: ../ordem-service/
    volumes:
      - .:/usr/app
    ports:
      - 8000:8000
    environment: 
      - HOST_REDIS=redis
      - PORT_REDIS=6379
      - URL_RABBIT_MQ=amqp://guest:guest@rabbit-mq/
      - HOST_JAEGER=jaeger-all-in-one
      - PORT_JAEGER=6831
      - PROXY_CONTA=http://conta-service:8003/
      - JAEGER_SAMPLER_TYPE=const      
    depends_on: 
      - redis
      - rabbit-mq
      - conta-service
      - jaeger-all-in-one      
    networks:
      - trader-network
    restart: always
    deploy:
      labels:
        - '--tracing.jaeger.traceContextHeaderName=uber-trace-id'
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.50'
          memory: 800M
        reservations:
          cpus: '0.25'
          memory: 800M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s 
  init-service:
    build: ../init-ordem/
    volumes:
      - .:/usr/app
    ports:
      - 8002:8002
    environment: 
      - HOST_REDIS=redis
      - PORT_REDIS=6379
      - URL_RABBIT_MQ=amqp://guest:guest@rabbit-mq/
      - HOST_JAEGER=jaeger-all-in-one
      - PORT_JAEGER=6831
      - JAEGER_SAMPLER_TYPE=const
    depends_on: 
      - redis
      - rabbit-mq
      - jaeger-all-in-one      
    networks:
      - trader-network
    restart: always
    deploy:          
      mode: replicated
      replicas: 1
      endpoint_mode: dnsrr
      resources:
        limits:
          cpus: '0.50'
          memory: 800M
        reservations:
          cpus: '0.25'
          memory: 800M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s 
  conta-service:
    build: ../conta-service/
    volumes:
      - .:/usr/app
    ports:
      - 8003:8003
    environment: 
      - HOST_REDIS=redis
      - PORT_REDIS=6379
      - URL_RABBIT_MQ=amqp://guest:guest@rabbit-mq/
      - HOST_JAEGER=jaeger-all-in-one
      - PORT_JAEGER=6831
      - JAEGER_SAMPLER_TYPE=const
    depends_on: 
      - redis
      - rabbit-mq
      - jaeger-all-in-one      
    networks:
      - trader-network
    restart: always
    deploy:    
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.50'
          memory: 800M
        reservations:
          cpus: '0.25'
          memory: 800M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s 
  jaeger-all-in-one:
    image: jaegertracing/all-in-one
    ports:
      - 16686:16686
      - 6831:6831/udp
      - 14268
      - 14250
      - 5775:5775/udp
      - 6832:6832/udp
      - 5778:5778
      - 14268:14268
      - 9411:9411
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.services.jaeger.loadbalancer.server.port=16686
        - traefik.http.routers.jaeger.rule=Host(`jaeger.wshihadeh.cloud`)
        - traefik.http.routers.jaeger.service=jaeger
        - traefik.http.routers.jaeger.entrypoints=web
        - traefik.docker.network=trader-network      
    networks:
      - trader-network

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - trader-network

  redis:
    image: redislabs/redismod
    ports:
    - 6379:6379
    volumes:
      - redis_data:/data/redis
    restart: always
    networks:
      - trader-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-ui
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin
    ports:
      - 8081:8081
    depends_on:
      - redis
    networks:
      - trader-network  

  rabbit-mq:
    image: rabbitmq:3.8.14-management
    ports:
      - 5672:5672
      - 15672:15672
      - 15692:15692
    networks:
      - trader-network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ../grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ../grafana/config.monitoring
    networks:
      - trader-network
    restart: always

  proxy:
    image: traefik:v2.8
    command: 
      - '--api.insecure=true' 
      - '--providers.docker'
      - '--log.level=DEBUG'
      - '--tracing.serviceName=traefik'
      - '--tracing.spanNameLimit=250'
      - '--tracing.jaeger=true'
      - '--tracing.jaeger.samplingServerURL=http://jaeger-all-in-one:5778/sampling'
      - '--tracing.jaeger.samplingType=const'
      - '--tracing.jaeger.samplingParam=1'
      - '--tracing.jaeger.localAgentHostPort=127.0.0.1:6831'
      - '--tracing.jaeger.gen128Bit=true'
      - '--tracing.jaeger.propagation=jaeger'
      - '--tracing.jaeger.traceContextHeaderName=traefik-trace-id'
      - '--tracing.jaeger.collector.endpoint=http://jaeger-all-in-one:14268/api/traces?format=jaeger.thrift'
      - '--metrics.prometheus={}'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - '80:80'
      - '8080:8080'
    deploy:
      # labels:
      #   - traefik.enable=true
      #   - traefik.docker.network=trader-network
      #   # Dashboard Router
      #   - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080
      #   - traefik.http.routers.traefik-dashboard.rule=Host(`dashboard.wshihadeh.cloud`)
      #   - traefik.http.routers.traefik-dashboard.service=traefik-dashboard
      #   - traefik.http.routers.traefik-dashboard.entrypoints=web
      restart_policy:
        #condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        delay: 10s
        order: start-first
        parallelism: 1
      rollback_config:
        parallelism: 0
        order: stop-first
    logging:
      driver: json-file
      options:
        'max-size': '10m'
        'max-file': '5'
    networks:
      - trader-network

volumes:
  redis_data: {}      
  grafana_data: {}

networks:
  trader-network:
    external: false
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16 