version: "3.9"
services:
  orquestrador:
    build: ../orquestrador/
    volumes:
      - .:/usr/app
    ports:
      - 8001:8001
    environment: 
      - HOST_REDIS=redis
      - PORT_REDIS=6379
      - URL_RABBIT_MQ=amqp://guest:guest@rabbit-mq/
      - HOST_JAEGER=jaeger-all-in-one
      - PORT_JAEGER=6831
    depends_on: 
      - redis
      - rabbit-mq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.orquestrador.rule=Host(`orquestrador.localhost`)"
      - "traefik.http.services.orquestrador.loadbalancer.server.port=8001"
    restart: always
    networks:
      - trader-network
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.50'
          memory: 800M
        reservations:
          cpus: '0.25'
          memory: 800M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s 
  ordem-service:
    build: ../ordem-service/
    volumes:
      - .:/usr/app
    ports:
      - 8000:8000
    environment: 
      - HOST_REDIS=redis
      - PORT_REDIS=6379
      - URL_RABBIT_MQ=amqp://guest:guest@rabbit-mq/
      - HOST_JAEGER=jaeger-all-in-one
      - PORT_JAEGER=6831
      - PROXY_CONTA=http://conta-service:8003/ 
    depends_on: 
      - redis
      - rabbit-mq
      - conta-service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ordem.rule=Host(`ordem.localhost`)"
      - "traefik.http.services.ordem.loadbalancer.server.port=8000"      
    restart: always
    networks:
      - trader-network    
    deploy:
      labels:
        - '--tracing.jaeger.traceContextHeaderName=uber-trace-id'
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.50'
          memory: 800M
        reservations:
          cpus: '0.25'
          memory: 800M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s 
  init-service:
    build: ../init-ordem/
    volumes:
      - .:/usr/app
    ports:
      - 8002:8002
    environment: 
      - HOST_REDIS=redis
      - PORT_REDIS=6379
      - URL_RABBIT_MQ=amqp://guest:guest@rabbit-mq/
      - HOST_JAEGER=jaeger-all-in-one
      - PORT_JAEGER=6831
    depends_on: 
      - redis
      - rabbit-mq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.init.rule=Host(`init.localhost`)"
      - "traefik.http.services.init.loadbalancer.server.port=8002"        
    restart: always
    networks:
      - trader-network    
    deploy:          
      mode: replicated
      replicas: 1
      endpoint_mode: dnsrr
      resources:
        limits:
          cpus: '0.50'
          memory: 800M
        reservations:
          cpus: '0.25'
          memory: 800M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s 
  conta-service:
    build: ../conta-service/
    volumes:
      - .:/usr/app
    ports:
      - 8003:8003
    environment: 
      - HOST_REDIS=redis
      - PORT_REDIS=6379
      - URL_RABBIT_MQ=amqp://guest:guest@rabbit-mq/
      - HOST_JAEGER=jaeger-all-in-one
      - PORT_JAEGER=6831
    depends_on: 
      - redis
      - rabbit-mq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.conta.rule=Host(`conta.localhost`)"
      - "traefik.http.services.conta.loadbalancer.server.port=8003"      
    restart: always
    networks:
      - trader-network    
    deploy:    
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.50'
          memory: 800M
        reservations:
          cpus: '0.25'
          memory: 800M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s 
  jaeger-all-in-one:
    image: jaegertracing/all-in-one
    #command: ["--reporter.grpc.host-port=jaeger-all-in-one:14250", "--reporter.grpc.retry.max=1000"]
    ports:
      - "6831:6831/udp"      
      - "16686:16686"
      - "14268"
      - "14250"
    labels:
      traefik.http.routers.jaeger.rule: Host(`jaeger.localhost`)
      traefik.http.routers.jaeger.entrypoints: web
      traefik.http.routers.jaeger.service: jaeger
      traefik.http.services.jaeger.loadbalancer.server.port: 16686
    networks:
      - trader-network      

  # zipkin-all-in-one:
  #   image: openzipkin/zipkin:latest
  #   ports:
  #     - "9411:9411"

  # otel-collector:
  #   image: otel/opentelemetry-collector-contrib:latest
  #   command: ["--config=/etc/otel-collector-config.yml", "${OTELCOL_ARGS}"]
  #   volumes:
  #     - ./otel-collector-config.yml:/etc/otel-collector-config.yml
  #   ports:
  #     - "1888:1888"   # pprof extension
  #     - "8888:8888"   # Prometheus metrics exposed by the collector
  #     - "8889:8889"   # Prometheus exporter metrics
  #     - "13133:13133" # health_check extension
  #     - "4317:4317"   # OTLP gRPC receiver
  #     # - "55679:55679" # zpages extension
  #     - "9411"   # Zipkin receiver
  #     - "55679" # zpages extension
  #   depends_on:
  #     - jaeger-all-in-one
  #     - zipkin-all-in-one

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - trader-network      

  redis:
    image: redislabs/redismod
    ports:
    - 6379:6379
    volumes:
      - redis_data:/data/redis
    restart: always
    networks:
      - trader-network    

  # redis-commander:
  #   image: rediscommander/redis-commander:latest
  #   container_name: redis-ui
  #   environment:
  #     - REDIS_HOSTS=local:redis:6379
  #     - HTTP_USER=admin
  #     - HTTP_PASSWORD=admin
  #   ports:
  #     - 8081:8081
  #   depends_on:
  #     - redis
  
  rabbit-mq:
    image: rabbitmq:3.8.14-management
    ports:
      - 5672:5672
      - 15672:15672
      - 15692:15692
    restart: always
    networks:
      - trader-network    
  # grafana:
  #   image: grafana/grafana
  #   depends_on:
  #     - prometheus
  #   ports:
  #     - 3000:3000
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ../grafana/provisioning/:/etc/grafana/provisioning/
  #   env_file:
  #     - ../grafana/config.monitoring
  #   restart: always
  proxy:
    image: traefik:v2.8
    command: 
      - '--api.insecure=true' 
      - '--providers.docker'
      - '--providers.docker.endpoint=unix:///var/run/docker.sock'
      - '--providers.docker.watch=true'
      - '--providers.docker.exposedbydefault=true'
      - '--log.level=DEBUG'
      - '--entrypoints.web.address=:80'
      - '--accessLog'
      - '--tracing.serviceName=traefik'
      - '--tracing.spanNameLimit=250'
      - '--tracing.jaeger=true'
      - '--tracing.jaeger.samplingServerURL=http://jaeger-all-in-one:5778/sampling'
      - '--tracing.jaeger.samplingType=const'
      - '--tracing.jaeger.samplingParam=1.0'
      - '--tracing.jaeger.localAgentHostPort=jaeger-all-in-one:6831'
      #- '--tracing.jaeger.gen128Bit=true'
      - '--tracing.jaeger.propagation=jaeger'
      - '--tracing.jaeger.traceContextHeaderName=uber-trace-id'
      - '--tracing.jaeger.collector.endpoint=http://jaeger-all-in-one:14268/api/traces?format=jaeger.thrift'
      - '--metrics.prometheus={}'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - '80:80'
      - '8080:8080'
    networks:
      - trader-network      
    deploy:
      restart_policy:
        #condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        delay: 10s
        order: start-first
        parallelism: 1
      rollback_config:
        parallelism: 0
        order: stop-first
    logging:
      driver: json-file
      options:
        'max-size': '10m'
        'max-file': '5'


volumes:
  redis_data: {}      
  grafana_data: {}

networks:
  trader-network:
